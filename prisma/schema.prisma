// Prisma schema for Quiz App migrated from MongoDB to PostgreSQL
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(cuid())
  pseudo    String        @unique
  createdAt DateTime      @default(now())
  sessions  GameSession[]
}

model GameSession {
  id              String            @id @default(cuid())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  stepSessions    StepSession[]

  @@index([userId])
  @@index([completedAt])
}

model StepSession {
  id        String      @id @default(cuid())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  gameSessionId String
  stepName  String
  stepRank     Int
  startedAt DateTime    @default(now()) // Quand l'étape est présentée à l'utilisateur
  answeredAt DateTime?  // Quand l'utilisateur répond correctement à l'énigme
  hasUsedHint  Boolean   @default(false) // Si l'utilisateur a utilisé un indice
  currentHintIndex Int   @default(0) // Index de l'indice actuel (0 = aucun, 1 = premier indice, etc.)
  
  // Nouvelles colonnes pour les sous-étapes
  currentSubStep String @default("direction") // direction, enigma, bonus, key
  directionCompletedAt DateTime?
  enigmaCompletedAt DateTime?
  enigmaAttemptsCount Int @default(0) // Nombre de tentatives pour l'énigme
  bonusAttemptedAt DateTime?
  isBonusCorrect Boolean?
  keyCompletedAt DateTime?
  collectedKey String? // La clé trouvée dans cette étape
  
  // Suivi des pénalités par étape
  penaltyTimeMs Int @default(0) // Temps de pénalité cumulé pour cette étape (en ms)
  
  @@unique([gameSessionId, stepName])
  @@index([gameSessionId, stepRank])
}
